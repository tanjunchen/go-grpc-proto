syntax = "proto3";

package istio;

option go_package = "beyondmesh/src/proto/istio";

option java_package = "com.tanjunchen.demo";
option java_outer_classname = "IstioOperatorProto";

import "status/status.proto";

// 在 k8s 集群中使用 IstioOperator CRD 创建 Istio Components
message IstioOperatorRequest{

  // 要安装的 istio 集群的 yaml 或者 json 内容
  string istioClusterValue = 1;

  // istio operator 的名称
  string istioOperatorName = 2;

  // istio operator 所在的命令空间
  string istioOperatorNamespace = 3;

  // 操作
  enum Operation {
    // 默认操作(什么也不干)
    REMOVE_NOTHING = 0;
    // remove the istio cluster(istiod) and istio crd, etc.
    // 卸载 istio 集群以及 istio crd 等资源信息
    REMOVE_ISTIO_CLUSTER = 1;
    // 卸载 Istio Operator
    REMOVE_ISTIO_OPERATOR = 2;
    // 卸载 beyondmesh go 端服务
    REMOVE_ISTIO_BEYONDMESH = 3;
  }
  // 卸载时所使用的动作指令
  Operation operation = 4;
}

message IstioOperatorResponse{

  status.Status status = 1;

  string istioClusterValueResponse = 2;
}

// 所有的 iop 信息
message IopInfo {
  // 名称
  string name = 1;
  // 命名空间
  string namespace = 2;
  // 对应的版本
  string revision = 3;
  // 创建你时间
  string createTime = 4;
}

// 所有的 iop response 信息
message IopInfoResponse{
  // 状态
  status.Status status = 1;

  // iop -A namespace
  repeated IopInfo  data = 2;
}

message DeleteIstioOperatorResponse{
  // 状态
  status.Status status = 1;

  // 删除信息
  string result = 2;
}

// IstioOperatorService rpc 服务
service IstioOperatorService{

  // 获取集群中所有的 istio operator 的信息
  rpc GetAllIstioOperatorInfo(IstioOperatorRequest) returns (IopInfoResponse);

  // 安装 Istio Operator 资源对象
  rpc AddIstioOperatorInfo(IstioOperatorRequest) returns (IstioOperatorResponse);

  // 更新 istio operator 信息
  rpc UpdateIstioOperatorInfo(IstioOperatorRequest) returns (IstioOperatorResponse);

  // 删除所有的 istio operator 信息
  rpc DeleteIstioOperatorInfo(stream IstioOperatorRequest) returns (stream DeleteIstioOperatorResponse);
}